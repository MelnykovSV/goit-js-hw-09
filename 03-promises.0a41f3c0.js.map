{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SA+CpC,SAASC,EAAgBC,EAAOC,GAY9B,OAXgB,IAAIC,SAAQ,CAACC,EAASC,KACpC,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,uBAAqBF,EAAY,QAASD,OAEhDI,EAAK,sBAAoBH,EAAU,QAASD,MAAU,GAEzDA,EAAM,G,CAtDbJ,EAAKa,iBAAiB,UAAUC,IAC9B,MAAMC,EAiBR,SAAyBD,GACvBA,EAAEE,iBACF,MAAMC,EAAO,IAAIC,SAASJ,EAAEK,eACtBJ,EAAa,GAEnB,IAAKK,OAAQ,IAAIH,GACfI,QAAQC,IAAI,GAAGF,KAAK,aAAaA,KAAK,MACtCL,EAAWK,KAAK,IAAMA,KAAK,GAI7B,OADApB,EAAKuB,QACER,C,CA5BYS,CAAgBV,GAI7BW,EA6BR,UAA0BrB,MAAEA,EAAKsB,KAAEA,EAAIC,OAAEA,IACvC,MAAMC,EAAS,GACf,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAQE,IAC1BD,EAAOE,KAAKC,SAAS3B,GAASyB,EAAIE,SAASL,IAG7C,OAAOE,C,CArCaI,CAAiBjB,GAEHkB,IAAI9B,GAEtC,IAAK+B,WAAWT,EACdS,QACGC,MAAKC,IACJC,EAAAvC,GAASwC,OAAOC,QAAQH,EAAE,IAE3BI,OAAMC,IACLJ,EAAAvC,GAASwC,OAAOI,QAAQD,EAAI,GAC5B","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', e => {\n  const formObject = geatherFormData(e);\n\n  const delaysArray = buildDelaysArray(formObject);\n\n  const promisesArray = delaysArray.map(generatePromise);\n\n  for (promise of promisesArray) {\n    promise\n      .then(a => {\n        Notiflix.Notify.success(a);\n      })\n      .catch(err => {\n        Notiflix.Notify.failure(err);\n      });\n  }\n});\n\nfunction geatherFormData(e) {\n  e.preventDefault();\n  const data = new FormData(e.currentTarget);\n  const formObject = {};\n\n  for (item of [...data]) {\n    console.log(`${item[0]} value: ${item[1]}`);\n    formObject[item[0]] = item[1];\n  }\n\n  form.reset();\n  return formObject;\n}\n\n//creates array of steps from data\n\nfunction buildDelaysArray({ delay, step, amount }) {\n  const delays = [];\n  for (let i = 0; i < amount; i++) {\n    delays.push(parseInt(delay) + i * parseInt(step));\n  }\n\n  return delays;\n}\n\n//generates single promise with given delay\n\nfunction generatePromise(delay, position) {\n  const promise = new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position + 1} in ${delay}ms`);\n      } else {\n        reject(`❌ Rejected promise ${position + 1} in ${delay}ms`);\n      }\n    }, delay);\n  });\n\n  return promise;\n}\n\n// Notiflix.Notify.info('Cogito ergo sum');\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$generatePromise","delay","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","e","formObject","preventDefault","data","FormData","currentTarget","item","console","log","reset","$47d4ff9957288465$var$geatherFormData","promisesArray","step","amount","delays","i","push","parseInt","$47d4ff9957288465$var$buildDelaysArray","map","promise","then","a","$parcel$interopDefault","Notify","success","catch","err","failure"],"version":3,"file":"03-promises.0a41f3c0.js.map"}